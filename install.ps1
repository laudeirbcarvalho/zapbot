# Script de instala√ß√£o do ZapBot para Windows
# Automatiza o processo de setup da aplica√ß√£o

Write-Host "üöÄ Iniciando instala√ß√£o do ZapBot..." -ForegroundColor Green

# Verificar se Docker est√° instalado
try {
    docker --version | Out-Null
    Write-Host "‚úÖ Docker encontrado!" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker n√£o encontrado. Por favor, instale o Docker Desktop primeiro." -ForegroundColor Red
    Write-Host "   Visite: https://docs.docker.com/desktop/windows/" -ForegroundColor Yellow
    exit 1
}

# Verificar se Docker Compose est√° dispon√≠vel
try {
    docker-compose --version | Out-Null
    Write-Host "‚úÖ Docker Compose encontrado!" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker Compose n√£o encontrado." -ForegroundColor Red
    exit 1
}

# Criar arquivo .env se n√£o existir
if (-not (Test-Path ".env")) {
    Write-Host "üìù Criando arquivo .env..." -ForegroundColor Yellow
    @"
# Configura√ß√µes da aplica√ß√£o
NODE_ENV=production
PORT=3000

# Adicione suas vari√°veis de ambiente aqui
# DATABASE_URL=
# API_KEY=
"@ | Out-File -FilePath ".env" -Encoding UTF8
    Write-Host "‚úÖ Arquivo .env criado! Configure suas vari√°veis de ambiente." -ForegroundColor Green
} else {
    Write-Host "‚úÖ Arquivo .env j√° existe." -ForegroundColor Green
}

# Build da imagem Docker
Write-Host "üî® Construindo imagem Docker..." -ForegroundColor Yellow
docker-compose build

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erro ao construir a imagem Docker." -ForegroundColor Red
    exit 1
}

# Iniciar os servi√ßos
Write-Host "üöÄ Iniciando servi√ßos..." -ForegroundColor Yellow
docker-compose up -d

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erro ao iniciar os servi√ßos." -ForegroundColor Red
    exit 1
}

# Aguardar a aplica√ß√£o ficar pronta
Write-Host "‚è≥ Aguardando aplica√ß√£o ficar pronta..." -ForegroundColor Yellow
Start-Sleep -Seconds 15

# Verificar se a aplica√ß√£o est√° rodando
try {
    $response = Invoke-WebRequest -Uri "http://localhost:3000/api/health" -UseBasicParsing -TimeoutSec 10
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ ZapBot instalado e rodando com sucesso!" -ForegroundColor Green
        Write-Host "üåê Acesse: http://localhost:3000" -ForegroundColor Cyan
        Write-Host "üìä Health Check: http://localhost:3000/api/health" -ForegroundColor Cyan
    }
} catch {
    Write-Host "‚ö†Ô∏è  Aplica√ß√£o pode estar ainda inicializando..." -ForegroundColor Yellow
    Write-Host "üîç Verifique os logs com: docker-compose logs -f" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üìã Comandos √∫teis:" -ForegroundColor Cyan
Write-Host "   Parar:     docker-compose down" -ForegroundColor White
Write-Host "   Logs:      docker-compose logs -f" -ForegroundColor White
Write-Host "   Rebuild:   docker-compose build --no-cache" -ForegroundColor White
Write-Host "   Status:    docker-compose ps" -ForegroundColor White
Write-Host ""
Write-Host "üéâ Instala√ß√£o conclu√≠da!" -ForegroundColor Green