generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String       @id @default(uuid())
  name              String
  email             String       @unique
  password          String
  userType          UserType     @default(MANAGER)
  isSuperAdmin      Boolean      @default(false)
  accountId         String?
  tenantId          String?
  adminId           String?
  isActive          Boolean      @default(true)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  attendances       Attendance[]
  adminAttendants   Attendant[]  @relation("AdminAttendants")
  managedAttendants Attendant[]  @relation("ManagerAttendants")
  createdLeads      Lead[]       @relation("UserCreatedLeads")
  admin             User?        @relation("AdminManagers", fields: [adminId], references: [id])
  managedManagers   User[]       @relation("AdminManagers")
  Tenant            Tenant?      @relation(fields: [tenantId], references: [id])

  @@index([adminId])
  @@index([tenantId])
}

model SystemSettings {
  id          String   @id @default(uuid())
  tenantId    String
  key         String
  value       String
  type        String   @default("string")
  category    String   @default("general")
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, key])
  @@index([category])
  @@index([tenantId])
}

model Lead {
  id          String       @id @default(uuid())
  name        String
  email       String?
  phone       String?
  source      String?
  status      String       @default("novo")
  notes       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  deletedBy   String?
  columnId    String?
  position    Int          @default(0)
  attendantId String?
  createdBy   String?
  tenantId    String?
  attendances Attendance[]
  attendant   Attendant?   @relation("AttendantLeads", fields: [attendantId], references: [id])
  column      Column?      @relation(fields: [columnId], references: [id])
  creator     User?        @relation("UserCreatedLeads", fields: [createdBy], references: [id])
  Tenant      Tenant?      @relation(fields: [tenantId], references: [id])
  ratings     Rating[]

  @@index([columnId])
  @@index([attendantId])
  @@index([createdBy])
  @@index([deletedAt])
  @@index([tenantId])
}

model Column {
  id        String    @id @default(uuid())
  title     String
  position  Int       @default(0)
  color     String    @default("#6B7280")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  deletedBy String?
  leads     Lead[]

  @@index([deletedAt])
}

model Integration {
  id        String   @id @default(uuid())
  name      String
  type      String
  config    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attendance {
  id          String    @id @default(uuid())
  leadId      String
  userId      String?
  type        String
  subject     String?
  description String?
  status      String    @default("pending")
  priority    String    @default("medium")
  scheduledAt DateTime?
  completedAt DateTime?
  duration    Int?
  outcome     String?
  nextAction  String?
  tags        String?
  attachments String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lead        Lead      @relation(fields: [leadId], references: [id], onDelete: Cascade)
  user        User?     @relation(fields: [userId], references: [id])

  @@index([leadId])
  @@index([userId])
  @@index([scheduledAt])
  @@index([status])
}

model Position {
  id          String      @id @default(uuid())
  name        String      @unique
  description String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  attendants  Attendant[]
}

model Function {
  id          String      @id @default(uuid())
  name        String      @unique
  description String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  attendants  Attendant[]
}

model Department {
  id          String      @id @default(uuid())
  name        String      @unique
  description String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  attendants  Attendant[]
}

model Attendant {
  id           String      @id @default(uuid())
  name         String
  email        String      @unique
  password     String?
  phone        String?
  cpf          String?     @unique
  photoUrl     String?
  positionId   String?
  functionId   String?
  departmentId String?
  managerId    String?
  adminId      String?
  tenantId     String?
  startTime    String
  endTime      String
  workDays     String
  isActive     Boolean     @default(true)
  canLogin     Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  admin        User?       @relation("AdminAttendants", fields: [adminId], references: [id])
  department   Department? @relation(fields: [departmentId], references: [id])
  function     Function?   @relation(fields: [functionId], references: [id])
  manager      User?       @relation("ManagerAttendants", fields: [managerId], references: [id])
  position     Position?   @relation(fields: [positionId], references: [id])
  Tenant       Tenant?     @relation(fields: [tenantId], references: [id])
  leads        Lead[]      @relation("AttendantLeads")
  ratings      Rating[]

  @@index([positionId])
  @@index([functionId])
  @@index([departmentId])
  @@index([managerId])
  @@index([adminId])
  @@index([tenantId])
}

model Rating {
  id          String    @id @default(uuid())
  attendantId String
  leadId      String?
  score       Int
  type        String
  comment     String?
  ratedBy     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  attendant   Attendant @relation(fields: [attendantId], references: [id], onDelete: Cascade)
  lead        Lead?     @relation(fields: [leadId], references: [id])

  @@index([attendantId])
  @@index([leadId])
  @@index([type])
}

model Tenant {
  id             String           @id
  name           String
  slug           String           @unique
  domain         String?          @unique
  email          String?
  password       String?
  logo           String?
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  Attendant      Attendant[]
  Lead           Lead[]
  SystemSettings SystemSettings[]
  User           User[]

  @@index([domain])
  @@index([slug])
}

enum UserType {
  ADMIN
  MANAGER
}
