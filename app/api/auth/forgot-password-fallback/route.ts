import { NextResponse } from 'next/server';
import crypto from 'crypto';
import nodemailer from 'nodemailer';

// Armazenamento tempor√°rio de tokens (em produ√ß√£o, use Redis ou banco)
const resetTokens = new Map<string, { email: string; token: string; expiry: Date }>();

export async function POST(request: Request) {
  try {
    console.log('üìß [FALLBACK] Iniciando processo de recupera√ß√£o de senha');
    const { email } = await request.json();
    console.log('üìß [FALLBACK] Email solicitado:', email);

    if (!email) {
      console.log('‚ùå [FALLBACK] Email n√£o fornecido');
      return NextResponse.json(
        { error: 'Email √© obrigat√≥rio' },
        { status: 400 }
      );
    }

    // Verificar se √© um email v√°lido do sistema
    const validEmails = ['ti@adlux.com.br', 'admin@zapbot.com'];
    
    if (!validEmails.includes(email)) {
      console.log('‚ùå [FALLBACK] Email n√£o encontrado:', email);
      console.log('üìã [FALLBACK] Emails v√°lidos:', validEmails);
      return NextResponse.json(
        { message: 'Se o email existir, voc√™ receber√° um link de recupera√ß√£o.' },
        { status: 200 }
      );
    }
    
    console.log('‚úÖ [FALLBACK] Email v√°lido encontrado:', email);

    // Gerar token de reset
    console.log('üîë [FALLBACK] Gerando token de reset...');
    const resetToken = crypto.randomBytes(32).toString('hex');
    const resetTokenExpiry = new Date(Date.now() + 3600000); // 1 hora
    console.log('üîë [FALLBACK] Token gerado:', resetToken.substring(0, 10) + '...');
    console.log('‚è∞ [FALLBACK] Token expira em:', resetTokenExpiry);

    // Salvar token em mem√≥ria
    console.log('üíæ [FALLBACK] Salvando token em mem√≥ria...');
    resetTokens.set(resetToken, {
      email,
      token: resetToken,
      expiry: resetTokenExpiry
    });
    console.log('‚úÖ [FALLBACK] Token salvo em mem√≥ria');

    // Verificar vari√°veis de ambiente
    console.log('üîß [FALLBACK] Verificando configura√ß√µes de email...');
    console.log('EMAIL_USER:', process.env.EMAIL_USER);
    console.log('EMAIL_FROM:', process.env.EMAIL_FROM);
    console.log('NEXTAUTH_URL:', process.env.NEXTAUTH_URL);
    console.log('EMAIL_PASS definido:', !!process.env.EMAIL_PASS);

    // Se n√£o tiver configura√ß√£o de email, simular envio
    if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
      console.log('‚ö†Ô∏è [FALLBACK] Configura√ß√£o de email n√£o encontrada, simulando envio...');
      const resetUrl = `${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/reset-password?token=${resetToken}`;
      console.log('üìß [FALLBACK] URL de reset (SIMULADO):', resetUrl);
      console.log('‚úÖ [FALLBACK] Email "enviado" com sucesso (simulado)!');
      
      return NextResponse.json(
        { 
          message: 'Email de recupera√ß√£o enviado! (Modo de desenvolvimento)',
          resetUrl: resetUrl // Apenas para desenvolvimento
        },
        { status: 200 }
      );
    }

    // Configurar nodemailer
    console.log('üìÆ [FALLBACK] Configurando transporter...');
    const transporter = nodemailer.createTransporter({
      service: 'gmail',
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
    });

    // Testar conex√£o
    console.log('üîó [FALLBACK] Testando conex√£o com servidor de email...');
    try {
      await transporter.verify();
      console.log('‚úÖ [FALLBACK] Conex√£o com servidor de email OK');
    } catch (verifyError) {
      console.error('‚ùå [FALLBACK] Erro na conex√£o com servidor de email:', verifyError);
      // Mesmo com erro, retornar sucesso para n√£o revelar problemas internos
      const resetUrl = `${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/reset-password?token=${resetToken}`;
      console.log('üìß [FALLBACK] URL de reset (erro email):', resetUrl);
      return NextResponse.json(
        { 
          message: 'Email de recupera√ß√£o enviado!',
          resetUrl: resetUrl // Para debug
        },
        { status: 200 }
      );
    }

    // Enviar email
    const resetUrl = `${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/reset-password?token=${resetToken}`;
    console.log('üìß [FALLBACK] URL de reset:', resetUrl);
    
    console.log('üì§ [FALLBACK] Enviando email...');
    await transporter.sendMail({
      from: process.env.EMAIL_FROM,
      to: email,
      subject: 'Recupera√ß√£o de Senha - ZapBot',
      html: `
        <h2>Recupera√ß√£o de Senha</h2>
        <p>Voc√™ solicitou a recupera√ß√£o de sua senha.</p>
        <p>Clique no link abaixo para redefinir sua senha:</p>
        <a href="${resetUrl}" style="background-color: #4CAF50; color: white; padding: 14px 20px; text-decoration: none; display: inline-block;">Redefinir Senha</a>
        <p>Este link expira em 1 hora.</p>
        <p>Se voc√™ n√£o solicitou esta recupera√ß√£o, ignore este email.</p>
      `,
    });
    console.log('‚úÖ [FALLBACK] Email enviado com sucesso!');

    return NextResponse.json(
      { message: 'Email de recupera√ß√£o enviado!' },
      { status: 200 }
    );

  } catch (error) {
    console.error('‚ùå [FALLBACK] Erro no processo de recupera√ß√£o:', error);
    return NextResponse.json(
      { message: 'Se o email existir, voc√™ receber√° um link de recupera√ß√£o.' },
      { status: 200 }
    );
  }
}

// Fun√ß√£o para verificar token (para uso na API de reset)
export function getResetToken(token: string) {
  const tokenData = resetTokens.get(token);
  if (!tokenData) return null;
  
  if (new Date() > tokenData.expiry) {
    resetTokens.delete(token);
    return null;
  }
  
  return tokenData;
}

// Fun√ß√£o para remover token ap√≥s uso
export function removeResetToken(token: string) {
  resetTokens.delete(token);
}