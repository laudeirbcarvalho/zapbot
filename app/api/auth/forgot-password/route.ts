import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import crypto from 'crypto';
import nodemailer from 'nodemailer';

const prisma = new PrismaClient();

export async function POST(request: Request) {
  try {
    console.log('üìß Iniciando processo de recupera√ß√£o de senha');
    const { email } = await request.json();
    console.log('üìß Email solicitado:', email);
    
    // Obter informa√ß√µes do tenant do header
    const tenantSlug = request.headers.get('x-tenant-slug');
    const tenantName = request.headers.get('x-tenant-name');

    if (!email) {
      console.log('‚ùå Email n√£o fornecido');
      return NextResponse.json(
        { error: 'Email √© obrigat√≥rio' },
        { status: 400 }
      );
    }

    // Verificar se o banco est√° dispon√≠vel
    try {
      await prisma.$connect();
      console.log('‚úÖ Conex√£o com banco estabelecida');
    } catch (connectionError) {
      console.log('‚ùå Banco n√£o dispon√≠vel, usando fallback...');
      // Redirecionar para API de fallback
      const fallbackResponse = await fetch(`${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/api/auth/forgot-password-fallback`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email }),
      });
      
      const fallbackData = await fallbackResponse.json();
      return NextResponse.json(fallbackData, { status: fallbackResponse.status });
    }

    // Verificar se o usu√°rio existe
    console.log('üîç Procurando usu√°rio no banco...');
    const user = await prisma.user.findUnique({
      where: { email },
    });

    if (!user) {
      console.log('‚ùå Usu√°rio n√£o encontrado:', email);
      // Listar todos os usu√°rios para debug
      const allUsers = await prisma.user.findMany({
        select: { email: true, name: true }
      });
      console.log('üìã Usu√°rios no banco:', allUsers);
      // Por seguran√ßa, n√£o revelamos se o email existe ou n√£o
      return NextResponse.json(
        { message: 'Se o email existir, voc√™ receber√° um link de recupera√ß√£o.' },
        { status: 200 }
      );
    }
    
    console.log('‚úÖ Usu√°rio encontrado:', user.email);

    // Gerar token de reset
    console.log('üîë Gerando token de reset...');
    const resetToken = crypto.randomBytes(32).toString('hex');
    const resetTokenExpiry = new Date(Date.now() + 3600000); // 1 hora
    console.log('üîë Token gerado:', resetToken.substring(0, 10) + '...');
    console.log('‚è∞ Token expira em:', resetTokenExpiry);

    // Salvar token no banco
    console.log('üíæ Salvando token no banco...');
    await prisma.user.update({
      where: { email },
      data: {
        resetToken,
        resetTokenExpiry,
      },
    });
    console.log('‚úÖ Token salvo no banco');

    // Verificar vari√°veis de ambiente
    console.log('üîß Verificando configura√ß√µes de email...');
    console.log('EMAIL_USER:', process.env.EMAIL_USER);
    console.log('EMAIL_FROM:', process.env.EMAIL_FROM);
    console.log('NEXTAUTH_URL:', process.env.NEXTAUTH_URL);
    console.log('EMAIL_PASS definido:', !!process.env.EMAIL_PASS);

    // Configurar transporter de email (exemplo com Gmail)
    console.log('üìÆ Configurando transporter...');
    const transporter = nodemailer.createTransporter({
      service: 'gmail',
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
    });

    // Testar conex√£o
    console.log('üîó Testando conex√£o com servidor de email...');
    try {
      await transporter.verify();
      console.log('‚úÖ Conex√£o com servidor de email OK');
    } catch (verifyError) {
      console.error('‚ùå Erro na conex√£o com servidor de email:', verifyError);
      return NextResponse.json(
        { error: 'Erro na configura√ß√£o de email' },
        { status: 500 }
      );
    }

    // URL de reset
    const resetUrl = `${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/reset-password?token=${resetToken}`;
    console.log('üìß URL de reset:', resetUrl);

    // Enviar email
    const systemName = tenantName || 'Sistema';
    const mailOptions = {
      from: process.env.EMAIL_FROM || 'noreply@sistema.com',
      to: email,
      subject: `Recupera√ß√£o de Senha - ${systemName}`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #333;">Recupera√ß√£o de Senha</h2>
          <p>Voc√™ solicitou a recupera√ß√£o de senha para sua conta no ${systemName}.</p>
          <p>Clique no link abaixo para redefinir sua senha:</p>
          <a href="${resetUrl}" style="background-color: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: inline-block;">Redefinir Senha</a>
          <p style="margin-top: 20px; color: #666;">Este link expira em 1 hora.</p>
          <p style="color: #666;">Se voc√™ n√£o solicitou esta recupera√ß√£o, ignore este email.</p>
        </div>
      `,
    };

    console.log('üì§ Enviando email...');
    try {
      await transporter.sendMail(mailOptions);
      console.log('‚úÖ Email de recupera√ß√£o enviado para:', email);
    } catch (emailError) {
      console.error('‚ùå Erro ao enviar email:', emailError);
      // Mesmo com erro no email, n√£o revelamos isso ao usu√°rio
    }

    return NextResponse.json(
      { message: 'Se o email existir, voc√™ receber√° um link de recupera√ß√£o' },
      { status: 200 }
    );
  } catch (error) {
    console.error('Erro na recupera√ß√£o de senha:', error);
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    );
  }
}